name: IPTV FG Live

on:
  schedule:
    - cron: '30 */12 * * *'  # 每天0:30起，每12小时执行一次
  workflow_dispatch:        # 手动触发

concurrency:
  group: fglive-${{ github.ref }}

jobs:
  update-m3u:
    runs-on: ubuntu-22.04
     
    steps:
    
      # 获取文件锁
      - name: Acquire lock
        run: |
          LOCK_FILE="/tmp/fglive.lock"
          exec {lock_fd}>$LOCK_FILE || exit 1
          trap 'rm -f $LOCK_FILE' EXIT
          flock -n $lock_fd || {
            echo "Another job is running, waiting for lock..."
            flock $lock_fd
          }
          
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 下载 iptv.txt 文件并提取目标 URL 和 USER_AGENT
      - name: Extract target URL and USER_AGENT
        run: |
          set -e

          echo "Fetching iptv.txt from the private repository..."
          IPTV_FILE_PATH="./iptv.txt"

          if [ ! -f "$IPTV_FILE_PATH" ]; then
            echo "Error: iptv.txt file not found in the repository root" >&2
            exit 1
          fi

          IPTV_CONTENT=$(cat "$IPTV_FILE_PATH")

          # 提取目标 URL 和 USER_AGENT
          TARGET_URL=$(echo "$IPTV_CONTENT" | awk '/# 全球电视/{getline; print}' | tr -d '\r')
          USER_AGENT=$(echo "$IPTV_CONTENT" | awk '/# USER_AGENT/{getline; print}' | tr -d '\r')

          if [ -z "$TARGET_URL" ]; then
            echo "Error: Target URL not found in iptv.txt" >&2
            exit 1
          fi
          if [ -z "$USER_AGENT" ]; then
            echo "Error: USER_AGENT not found in iptv.txt" >&2
            exit 1
          fi

          echo "Extracted TARGET_URL: $TARGET_URL"
          echo "Extracted USER_AGENT: $USER_AGENT"

          # 下载 M3U 文件并保存为 fglive.m3u
          echo "Downloading M3U file..."
          curl -sfL -A "$USER_AGENT" "$TARGET_URL" -o fglive.m3u || { echo "Error: Failed to download M3U file"; exit 1; } # 修改点 1

          if [ ! -s fglive.m3u ]; then
            echo "Error: fglive.m3u file is empty" >&2
            exit 1
          fi

          # 删除包含“免费使用规则”的行及其下一行
          echo "Removing lines related to '免费使用规则'..."
          sed -i -e '/免费使用规则/{N;d;}' fglive.m3u

          # 替换 x-tvg-url
          echo "Replacing x-tvg-url with new URL..."
          sed -i 's|x-tvg-url="[^"]*"|x-tvg-url="https://raw.githubusercontent.com/Yu0754/IPTV/main/fgepg.xml"|g' fglive.m3u

          # 替换 .png 文件的 URL
          echo "Updating .png file URLs..."
          sed -i 's|\(http[^ ]*/\)\([^/]*\.png\)|https://raw.githubusercontent.com/Yu0754/IPTV/main/FG Logo/\2|' fglive.m3u

          # 确认处理结果
          echo "Processed fglive.m3u (preview):"
          head -n 10 fglive.m3u || { echo "Error: Failed to process fglive.m3u"; exit 1; }

      # 提交并推送更改
      - name: Commit and push changes
        run: |
          set -e
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # 暂存未提交的更改
          echo "Stashing uncommitted changes..."
          git stash || echo "No changes to stash"

          # 确保无冲突更新
          echo "Pulling latest changes from origin/main..."
          git pull --rebase origin main || { echo "Error: Git pull failed. Please resolve conflicts."; exit 1; }

          # 恢复暂存的更改
          echo "Applying stashed changes..."
          git stash pop || echo "No stashed changes to apply"

          git add fglive.m3u
          git commit -m "Update fglive.m3u on $(date)" || echo "No changes to commit"
          git push origin main || { echo "Error: Git push failed. Ensure no conflicts exist."; exit 1; }
