name: CN EPG

on:
  schedule:
    - cron: '30 0-23/2 * * *'  # 每天从 0:30 开始每两小时执行一次
  workflow_dispatch:        # 手动触发

concurrency:
  group: cnepg-${{ github.ref }}

jobs:
  update-m3u:
    runs-on: ubuntu-22.04

    steps:
    
      # 获取文件锁
      - name: Acquire lock
        run: |
          LOCK_FILE="/tmp/cnepg.lock"
          exec {lock_fd}>$LOCK_FILE || exit 1
          trap 'rm -f $LOCK_FILE' EXIT
          flock -n $lock_fd || {
            echo "Another job is running, waiting for lock..."
            flock $lock_fd
          }
          
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 下载 iptv.txt 文件并提取目标 URL 和 USER_AGENT
      - name: Extract target URL and USER_AGENT
        run: |
          set -e

          echo "Fetching iptv.txt from the private repository..."
          IPTV_FILE_PATH="./iptv.txt"

          if [ ! -f "$IPTV_FILE_PATH" ]; then
            echo "Error: iptv.txt file not found in the repository root" >&2
            exit 1
          fi

          IPTV_CONTENT=$(cat "$IPTV_FILE_PATH")

          # 提取目标 URL 和 USER_AGENT
          TARGET_URL=$(echo "$IPTV_CONTENT" | awk '/# 中国电视/{getline; print}' | tr -d '\r')
          USER_AGENT=$(echo "$IPTV_CONTENT" | awk '/# USER_AGENT/{getline; print}' | tr -d '\r')

          if [ -z "$TARGET_URL" ]; then
            echo "Error: Target URL not found in iptv.txt" >&2
            exit 1
          fi
          if [ -z "$USER_AGENT" ]; then
            echo "Error: USER_AGENT not found in iptv.txt" >&2
            exit 1
          fi

          echo "Extracted TARGET_URL: $TARGET_URL"
          echo "Extracted USER_AGENT: $USER_AGENT"

          # 使用 curl 下载 EPG 数据
          echo "Fetching TARGET_URL content..."
          EPG_FILE=$(curl -sL -A "$USER_AGENT" "$TARGET_URL")
          if [ -z "$EPG_FILE" ]; then
            echo "Failed to fetch EPG data or the content is empty"
            exit 1
          fi

          # 从下载的 EPG 数据中提取 x-tvg-url 的 URL
          X_TVG_URL=$(echo "$EPG_FILE" | grep -i "x-tvg-url" | cut -d '"' -f 2)
          if [ -z "$X_TVG_URL" ]; then
            echo "x-tvg-url not found or is empty"
            exit 1
          fi
          echo "x-tvg-url: $X_TVG_URL"

          # 下载 x-tvg-url 指向的 EPG 数据
          echo "Downloading EPG XML data from $X_TVG_URL..."
          curl -sL -A "$USER_AGENT" "$X_TVG_URL" -o cnepg.xml
          if [ ! -s cnepg.xml ]; then
            echo "Failed to download EPG XML data or the file is empty"
            exit 1
          fi

          # 输出处理的文件内容 (仅输出前10行，防止过长)
          echo "Downloaded cnepg.xml (preview):"
          head -n 10 cnepg.xml

      # 提交并推送更改
      - name: Commit and push changes
        run: |
          set -e
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

          # 暂存未提交的更改
          echo "Stashing uncommitted changes..."
          git stash || echo "No changes to stash"

          # 确保无冲突更新
          echo "Pulling latest changes from origin/main..."
          git pull --rebase origin main || { echo "Error: Git pull failed. Please resolve conflicts."; exit 1; }

          # 恢复暂存的更改
          echo "Applying stashed changes..."
          git stash pop || echo "No stashed changes to apply"

          git add cnepg.xml
          git commit -m "Update cnepg.xml on $(date)" || echo "No changes to commit"
          git push origin main || echo "Failed to push changes. Ensure no conflicts exist."

